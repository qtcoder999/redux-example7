{"version":3,"sources":["containers/counter/constants.js","containers/counter/reducers.js","containers/git-repo/constant.js","serviceWorker.js","containers/git-repo/sagas.js","redux/rootSaga.js","redux/configure-store.js","common/navigation/routes.jsx","common/utils/utils.js","common/utils/componentImports.jsx","App.js","index.js","containers/git-repo/reducer.js","redux/rootReducer.js"],"names":["INCREMENT","DECREMENT","INITIAL_STATE","counter","countReducer","state","action","type","newState","FETCH_REPOS","FETCH_REPOS_SUCCESS","FETCH_REPOS_FAILURE","FETCH_USER_DATA","FETCH_USER_DATA_SUCCESS","FETCH_USER_DATA_FAILURE","FETCH_REPO_DETAILS","FETCH_REPO_DETAILS_SUCCESS","FETCH_REPO_DETAILS_FAILURE","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","getUsers","gitUserWatcherSaga","getUserData","fetchUserDetails","call","axios","get","data","put","payload","takeLatest","rootSaga","all","require","createStore","applyMiddleware","compose","rootReducer","sagaMiddleware","saga","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","thunk","run","Navigation","to","ReactLazyPreload","importStatement","Component","React","lazy","preload","GitRepo","CounterContainer","UserList","GitRepoPreload","CounterContainerPreload","UserListPreload","App","useEffect","Components","fallback","path","render","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","users","isLoading","isError","userData","details","repoDetails","combineReducers","count","repos"],"mappings":"uHAAA,oEAAO,IAAMA,EAAY,YACZC,EAAY,a,qFCCnBC,EAAgB,CAElBC,QAAS,GAKAC,EAAe,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCAE3D,OAAQA,EAAOC,MAEX,KAAKP,IAED,IAAIQ,EAAQ,eAAQH,GAIpB,OAFAG,EAASL,UAEFK,EAIX,KAAKP,IAED,IAAIO,EAAQ,eAAQH,GAIpB,OAFAG,EAASL,UAEFK,EAIX,QAAS,OAAOH,K,wFCjCxB,kTAAO,IAAMI,EAAc,cACdC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAkB,kBAClBC,EAA0B,0BAC1BC,EAA0B,0BAC1BC,EAAqB,qBACrBC,EAA6B,6BAC7BC,EAA6B,8B,4ECIpCC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,wFCnFhDC,G,WAaAC,G,WAIAC,G,WAiBAC,GAlCV,SAAUH,IAAV,yEAEc,OAFd,kBAEoBI,aAAK,kBAC1BC,IAAMC,IAAI,oEAHT,OAKH,OALG,SAEKC,EAFL,EAEKA,KAFL,SAKGC,YAAI,CAAE5C,KAAMG,IAAqB0C,QAASF,IAL7C,8BAOH,OAPG,mCAOGC,YAAI,CAAE5C,KAAMI,IAAqByC,QAAQ,EAAD,KAP3C,qDAaA,SAAUR,IAAV,iEACL,OADK,SACCS,YAAW5C,IAAakC,GADzB,uCAIA,SAAUE,EAAYvC,GAAtB,yEAGc,OAHd,kBAGoByC,aACrB,cAAGK,QAAH,OACEJ,IAAMC,IAAN,mEAGF3C,GARC,OAWH,OAXG,SAGK4C,EAHL,EAGKA,KAHL,SAWGC,YAAI,CAAE5C,KAAMM,IAAyBuC,QAASF,IAXjD,8BAaH,OAbG,mCAaGC,YAAI,CAAE5C,KAAMO,IAAyBsC,QAAQ,EAAD,KAb/C,qDAiBA,SAAUN,IAAV,iEACL,OADK,SACCO,YAAWzC,IAAiBiC,GAD7B,uC,eCzCUS,GAAV,SAAUA,IAAV,iEACL,OADK,SACCC,YAAI,CAACX,IAAsBE,MAD5B,uC,MCH2CU,EAAQ,IAAlDC,E,EAAAA,YAAaC,E,EAAAA,gBAAiBC,E,EAAAA,QAC9BC,EAAgBJ,EAAQ,IAAxBI,YAEFC,EAAiBC,cAIVC,EAAQN,EACnBG,GAHuBxC,OAAO4C,sCAAwCL,GAIrDD,EAAgBG,EAAgBI,OAGnDJ,EAAeK,IAAIZ,G,mBCUJa,EArBI,kBACf,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,QAAT,eAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,YAAT,eCfHC,EAAmB,SAACC,GAC/B,IAAMC,EAAYC,IAAMC,KAAKH,GAE7B,OADAC,EAAUG,QAAUJ,EACbC,GCDF,IAAMI,EAAUH,IAAMC,MAAK,kBAC9B,gCAESG,EAAmBJ,IAAMC,MAAK,kBACvC,iCAESI,EAAWL,IAAMC,MAAK,kBAC/B,gCAISK,EAAiBT,GAAiB,kBAC3C,gCAESU,EAA0BV,GAAiB,kBACpD,iCAESW,EAAkBX,GAAiB,kBAC5C,gCCsBWY,MA7Bf,WAOE,OANAC,qBAAU,WACRC,EAA0BT,UAC1BS,EAAmCT,UACnCS,EAA2BT,YAC1B,IAGD,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,WAAD,CAAUqB,SAAU,MAClB,gCACE,6CACA,sDACA,+CAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,OAAQ,kBAAM,6BAAK,kBAAC,EAAD,UACtC,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,6BAAK,kBAAC,EAAD,UACxC,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,6BAAK,kBAAC,EAAD,UAC1C,kBAAC,IAAD,CAAUlB,GAAG,WC9BzBmB,IAASD,OACP,kBAAC,EAAD,MACAE,SAASC,eAAe,SRcnB,SAAkB/D,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+D,IAAIC,cAAwBvE,OAAOC,SAASuE,MACpDC,SAAWzE,OAAOC,SAASwE,OAIvC,OAGFzE,OAAO0E,iBAAiB,QAAQ,WAC9B,IAAMrE,EAAK,UAAMkE,cAAN,sBAEPzE,IAgEV,SAAiCO,EAAOC,GAEtCqE,MAAMtE,EAAO,CACXuE,QAAS,CAAE,iBAAkB,YAE5BlE,MAAK,SAAAmE,GAEJ,IAAMC,EAAcD,EAASD,QAAQ/C,IAAI,gBAEnB,MAApBgD,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzE,UAAUC,cAAcyE,MAAMvE,MAAK,SAAAC,GACjCA,EAAauE,aAAaxE,MAAK,WAC7BV,OAAOC,SAASkF,eAKpB/E,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAkE,CAAwB/E,EAAOC,GAI/BC,UAAUC,cAAcyE,MAAMvE,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OQpC/BE,I,6HCFM1B,EAAgB,CACpBuG,MAAO,GACPC,WAAW,EACXC,SAAS,EACTC,SAAU,CACRF,WAAW,EACXC,SAAS,EACTE,QAAS,IAEXC,YAAa,CACXJ,WAAW,EACXC,SAAS,EACTE,QAAS,KCpBN,IAAMjD,EAAcmD,0BAAgB,CACzCC,MAAO5G,IACP6G,MDsBK,WAAgE,IAA3C5G,EAA0C,uDAAlCH,EAAkC,yCAAjBkD,EAAiB,EAAjBA,QAAS7C,EAAQ,EAARA,KAC5D,OAAQA,GACN,KAAKE,IACH,OAAO,2BAAKJ,GAAZ,IAAmBqG,WAAW,IAChC,KAAKhG,IACH,OAAO,2BAAKL,GAAZ,IAAmBoG,MAAOrD,EAASsD,WAAW,IAChD,KAAK/F,IACH,OAAO,2BAAKN,GAAZ,IAAmBqG,WAAW,EAAOC,QAASvD,IAEhD,KAAKxC,IACH,OAAO,2BAAKP,GAAZ,IAAmBuG,SAAS,2BAAMvG,EAAMuG,UAAb,IAAuBF,WAAW,MAC/D,KAAK7F,IACH,OAAO,2BACFR,GADL,IAEEuG,SAAS,2BACJvG,EAAMuG,UADH,IAENC,QAAQ,YAAKzD,GACbsD,WAAW,MAGjB,KAAK5F,IACH,OAAO,2BACFT,GADL,IAEEuG,SAAS,2BAAMvG,EAAMuG,UAAb,IAAuBD,SAAS,EAAMD,WAAW,MAG7D,KAAK3F,IACH,OAAO,2BACFV,GADL,IAEEyG,YAAY,2BAAMzG,EAAMyG,aAAb,IAA0BJ,WAAW,MAEpD,KAAK1F,IACH,OAAO,2BACFX,GADL,IAEEyG,YAAY,2BACPzG,EAAMyG,aADA,IAETD,QAAQ,YAAKzD,GACbsD,WAAW,MAGjB,KAAKzF,IACH,OAAO,2BACFZ,GADL,IAEEyG,YAAY,2BAAMzG,EAAMyG,aAAb,IAA0BH,SAAS,EAAMD,WAAW,MAGnE,QACE,OAAOrG,Q","file":"static/js/main.77c9aa0c.chunk.js","sourcesContent":["export const INCREMENT = \"INCREMENT\";\r\nexport const DECREMENT = \"DECREMENT\";","import { INCREMENT, DECREMENT } from \"./constants\";\r\n\r\nconst INITIAL_STATE = {\r\n\r\n    counter: 0\r\n\r\n}\r\n\r\n\r\nexport const countReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case INCREMENT: {\r\n\r\n            let newState = { ...state }\r\n\r\n            newState.counter++;\r\n\r\n            return newState\r\n\r\n        }\r\n\r\n        case DECREMENT: {\r\n\r\n            let newState = { ...state }\r\n\r\n            newState.counter--;\r\n\r\n            return newState\r\n\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n\r\n\r\n\r\n}","export const FETCH_REPOS = \"FETCH_REPOS\";\r\nexport const FETCH_REPOS_SUCCESS = \"FETCH_REPOS_SUCCESS\";\r\nexport const FETCH_REPOS_FAILURE = \"FETCH_REPOS_FAILURE\";\r\nexport const FETCH_USER_DATA = \"FETCH_USER_DATA\";\r\nexport const FETCH_USER_DATA_SUCCESS = \"FETCH_USER_DATA_SUCCESS\";\r\nexport const FETCH_USER_DATA_FAILURE = \"FETCH_USER_DATA_FAILURE\";\r\nexport const FETCH_REPO_DETAILS = \"FETCH_REPO_DETAILS\";\r\nexport const FETCH_REPO_DETAILS_SUCCESS = \"FETCH_REPO_DETAILS_SUCCESS\";\r\nexport const FETCH_REPO_DETAILS_FAILURE = \"FETCH_REPO_DETAILS_FAILURE\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  FETCH_REPOS,\r\n  FETCH_REPOS_FAILURE,\r\n  FETCH_REPOS_SUCCESS,\r\n  FETCH_USER_DATA,\r\n  FETCH_USER_DATA_SUCCESS,\r\n  FETCH_USER_DATA_FAILURE,\r\n} from \"./constant\";\r\nimport axios from \"axios\";\r\n\r\n//worker saga\r\n\r\nexport function* getUsers() {\r\n  try {\r\n    const { data } = yield call(() =>\r\n      axios.get(\"https://jsonblob.com/api/64743a51-ce9c-11ea-a271-23e375ad002d\")\r\n    );\r\n    yield put({ type: FETCH_REPOS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    yield put({ type: FETCH_REPOS_FAILURE, payload: error });\r\n  }\r\n}\r\n\r\n//watcher saga\r\n\r\nexport function* gitUserWatcherSaga() {\r\n  yield takeLatest(FETCH_REPOS, getUsers);\r\n}\r\n\r\nexport function* getUserData(action) {\r\n  try {\r\n    // const { data } = yield call(({payload}) => axios.get(`https://api.github.com/users/${payload}/repos`), action);\r\n    const { data } = yield call(\r\n      ({ payload }) =>\r\n        axios.get(\r\n          `https://jsonblob.com/api/81ae874d-ce9c-11ea-a271-e79f32c2ac48`\r\n        ),\r\n      action\r\n    );\r\n\r\n    yield put({ type: FETCH_USER_DATA_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    yield put({ type: FETCH_USER_DATA_FAILURE, payload: error });\r\n  }\r\n}\r\n\r\nexport function* fetchUserDetails() {\r\n  yield takeLatest(FETCH_USER_DATA, getUserData);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport {\r\n  gitUserWatcherSaga,\r\n  fetchUserDetails,\r\n} from \"../containers/git-repo/sagas\";\r\n\r\nexport function* rootSaga() {\r\n  yield all([gitUserWatcherSaga(), fetchUserDetails()]);\r\n}\r\n","import saga from \"redux-saga\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootSaga } from \"./rootSaga\";\r\nconst { createStore, applyMiddleware, compose } = require(\"redux\");\r\nconst { rootReducer } = require(\"./rootReducer\");\r\n\r\nconst sagaMiddleware = saga();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware, thunk))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Navigation = () => (\r\n    <div>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/git\">Git Reader</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/users\">Users</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/counter\">Counter</Link>\r\n            </li>\r\n        </ul>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Navigation","import React from \"react\";\r\n\r\nexport const ReactLazyPreload = (importStatement) => {\r\n  const Component = React.lazy(importStatement);\r\n  Component.preload = importStatement;\r\n  return Component;\r\n};\r\n\r\nexport const compareObjects = (obj1, obj2) => {\r\n  const obj1Keys = Object.keys(obj1);\r\n  const obj2Keys = Object.keys(obj2);\r\n\r\n  if (obj1Keys.length !== obj2Keys.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let objKey of obj1Keys) {\r\n    if (obj1[objKey] !== obj2[objKey]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport function arraysAreEqual(ary1, ary2) {\r\n  return ary1.join(\"\") === ary2.join(\"\");\r\n}\r\n","import React from \"react\"\r\n\r\nimport { ReactLazyPreload } from \"./utils\";\r\n\r\nexport const GitRepo = React.lazy(() =>\r\n    import(\"../../containers/git-repo/gitRepoContainer\")\r\n);\r\nexport const CounterContainer = React.lazy(() =>\r\n    import(\"../../containers/counter/counter-container\")\r\n);\r\nexport const UserList = React.lazy(() =>\r\n    import(\"../../containers/users/user-list\")\r\n);\r\n\r\n\r\nexport const GitRepoPreload = ReactLazyPreload(() =>\r\n    import(\"../../containers/git-repo/gitRepoContainer\")\r\n);\r\nexport const CounterContainerPreload = ReactLazyPreload(() =>\r\n    import(\"../../containers/counter/counter-container\")\r\n);\r\nexport const UserListPreload = ReactLazyPreload(() =>\r\n    import(\"../../containers/users/user-list\")\r\n);\r\n","import React, { Suspense, useEffect } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/configure-store\";\r\n\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\nimport Navigation from \"./common/navigation/routes\";\r\n\r\nimport * as Components from \"./common/utils/componentImports\"\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    Components.GitRepoPreload.preload()\r\n    Components.CounterContainerPreload.preload()\r\n    Components.UserListPreload.preload()\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Suspense fallback={null}>\r\n        <header>\r\n          <h1>Github Reader</h1>\r\n          <h2>Counter: Keep Counting</h2>\r\n          <h3>Get Users List</h3>\r\n        </header>\r\n        <BrowserRouter>\r\n          <Navigation />\r\n          <Switch>\r\n            <Route path=\"/git\" render={() => <div><Components.GitRepo /></div>} />\r\n            <Route path=\"/users\" render={() => <div><Components.UserList /></div>} />\r\n            <Route path=\"/counter\" render={() => <div><Components.CounterContainer /></div>} />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </Suspense>\r\n    </Provider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppNonLazy from \"./App\"\r\n\r\nReactDOM.render(\r\n  <AppNonLazy />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import {\r\n  FETCH_REPOS_SUCCESS,\r\n  FETCH_REPOS,\r\n  FETCH_REPOS_FAILURE,\r\n  FETCH_USER_DATA,\r\n  FETCH_USER_DATA_SUCCESS,\r\n  FETCH_USER_DATA_FAILURE,\r\n  FETCH_REPO_DETAILS,\r\n  FETCH_REPO_DETAILS_SUCCESS,\r\n  FETCH_REPO_DETAILS_FAILURE,\r\n} from \"./constant\";\r\n\r\nconst INITIAL_STATE = {\r\n  users: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  userData: {\r\n    isLoading: false,\r\n    isError: false,\r\n    details: [],\r\n  },\r\n  repoDetails: {\r\n    isLoading: false,\r\n    isError: false,\r\n    details: [],\r\n  },\r\n};\r\n\r\nexport function repoReducer(state = INITIAL_STATE, { payload, type }) {\r\n  switch (type) {\r\n    case FETCH_REPOS:\r\n      return { ...state, isLoading: true };\r\n    case FETCH_REPOS_SUCCESS:\r\n      return { ...state, users: payload, isLoading: false };\r\n    case FETCH_REPOS_FAILURE:\r\n      return { ...state, isLoading: false, isError: payload };\r\n\r\n    case FETCH_USER_DATA:\r\n      return { ...state, userData: { ...state.userData, isLoading: true } };\r\n    case FETCH_USER_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        userData: {\r\n          ...state.userData,\r\n          details: [...payload],\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case FETCH_USER_DATA_FAILURE:\r\n      return {\r\n        ...state,\r\n        userData: { ...state.userData, isError: true, isLoading: false },\r\n      };\r\n\r\n    case FETCH_REPO_DETAILS:\r\n      return {\r\n        ...state,\r\n        repoDetails: { ...state.repoDetails, isLoading: true },\r\n      };\r\n    case FETCH_REPO_DETAILS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        repoDetails: {\r\n          ...state.repoDetails,\r\n          details: [...payload],\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case FETCH_REPO_DETAILS_FAILURE:\r\n      return {\r\n        ...state,\r\n        repoDetails: { ...state.repoDetails, isError: true, isLoading: false },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { countReducer } from \"../containers/counter/reducers\";\r\nimport { repoReducer } from \"../containers/git-repo/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  count: countReducer,\r\n  repos: repoReducer,\r\n});\r\n"],"sourceRoot":""}